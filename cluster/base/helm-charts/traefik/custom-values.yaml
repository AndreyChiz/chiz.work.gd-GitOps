service:
  type: NodePort
# Configure Network Ports and EntryPoints
# EntryPoints are the network listeners for incoming traffic.
ports:
  # Defines the HTTP entry point named 'web'
  web:
    port: 8000
    expose:
      default: true
    exposedPort: 80
    nodePort: 30001
    # Instructs this entry point to redirect all traffic to the 'websecure' entry point

  # Defines the HTTPS entry point named 'websecure'
  websecure:
    port: 8443
    expose:
      default: true
    exposedPort: 443
    nodePort: 30000

  traefik:
    port: 8080
    expose:
      default: true
    exposedPort: 8080
    protocol: TCP

# Enables the dashboard in Secure Mode
api:
  dashboard: true
  insecure: true

ingressRoute:
  dashboard:
    enabled: true
#     matchRule: Host(`dashboard.docker.localhost`)
#     entryPoints:
#       - websecure
#     middlewares:
#       - name: dashboard-auth

# Creates a BasiAuth Middleware and Secret for the Dashboard Security

# We will route with Gateway API instead.
ingressClass:
  enabled: true
certificatesResolvers:
  letsencrypt:
    acme:
      email: "andrey.chizhov.dev@gmail.com"
      storage: /data/acme.json
      httpChallenge:
        entryPoint: web
# additionalArguments:
#   - "--certificatesresolvers.le.acme.email=meyouwe@gmale.com"
#   - "--certificatesresolvers.le.acme.storage=/data/acme.json"
#   - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"

# Enable Gateway API Provider & Disables the KubernetesIngress provider
# Providers tell Traefik where to find routing configuration.
providers:
  kubernetesIngress:
    enabled: true
  kubernetesGateway:
    enabled: false

## Gateway Listeners
# gateway:
#   listeners:
#     web:           # HTTP listener that matches entryPoint `web`
#       port: 80
#       protocol: HTTP
#       namespacePolicy:
#         from: All

#     websecure:         # HTTPS listener that matches entryPoint `websecure`
#       port: 443
#       protocol: HTTPS  # TLS terminates inside Traefik
#       namespacePolicy:
#         from: All
#       mode: Terminate
#       certificateRefs:
#         - kind: Secret
#           name: local-selfsigned-tls  # the Secret we created before the installation
#           group: ""

# Enable Observability
logs:
  general:
    level: INFO
  # This enables access logs, outputting them to Traefik's standard output by default. The [Access Logs Documentation](https://doc.traefik.io/traefik/observability/access-logs/) covers formatting, filtering, and output options.
  access:
    enabled: true

# Enables Prometheus for Metrics
metrics:
  prometheus:
    enabled: true

persistence:
  enabled: true
  name: acme-storage
  accessMode: ReadWriteOnce
  size: 10Mi
  storageClass: traefik-static
  path: /data
  annotations: {}

deployment:
  initContainers:
    - name: volume-permissions
      image: busybox:latest
      command:
        - sh
        - -c
        - |
          echo "Fix permissions for /data...";
          mkdir -p /data;
          touch /data/acme.json;
          chown -R 65532:65532 /data;
          chmod 600 /data/acme.json;
      volumeMounts:
        - name: acme-storage
          mountPath: /data

extraObjects:
  # - apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: dashboard-auth-secret
  #     annotations:
  #       argocd.argoproj.io/sync-options: Replace=true
  #   type: kubernetes.io/basic-auth
  #   stringData:
  #     username: admin
  #     password: "123"
  # - apiVersion: traefik.io/v1alpha1
  #   kind: Middleware
  #   metadata:
  #     name: dashboard-auth
  #   spec:
  #     basicAuth:
  #       secret: dashboard-auth-secret

  - apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: traefik-static
    provisioner: kubernetes.io/no-provisioner

  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: traefik-acme-pv
    spec:
      capacity:
        storage: 10Mi
      accessModes:
        - ReadWriteOnce
      storageClassName: traefik-static
      persistentVolumeReclaimPolicy: Delete
      hostPath:
        path: /mnt/data/traefik/acme
